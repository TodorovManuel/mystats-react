name: CI/CD with Docker

on:
  push:
    branches:
      - main  # Rama en la que se ejecutará el flujo de trabajo
  pull_request:
    branches:
      - main  # Rama en la que se ejecutará el flujo de trabajo

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Clonar el repositorio
      - name: Checkout code
        uses: actions/checkout@v3

      # Paso 2: Configurar Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Paso 3: Iniciar sesión en Docker Hub (o cualquier otro registro)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Paso 4: Construir y ejecutar los tests en la imagen Docker
      - name: Build and test Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: false  # No sube la imagen aún
          tags: my-app-react:test  # Usamos un tag para tests

      # Paso 5: Si los tests pasan, construir la imagen final para producción
      - name: Build and push Docker image for production
        if: success()  # Solo si los tests pasaron
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true  # Esto subirá la imagen a Docker Hub
          tags: ${{ secrets.DOCKER_USERNAME }}/mi-app-react:latest

      # Paso 6: (Opcional) Desplegar a un servidor (conexión SSH o similar)
      - name: Deploy to server
        run: |
          ssh user@server_ip "docker pull ${{ secrets.DOCKER_USERNAME }}/mi-app-react:latest"
          ssh user@server_ip "docker stop mi-app-react || true && docker rm mi-app-react || true"
          ssh user@server_ip "docker run -d -p 80:3000 --name mi-app-react ${{ secrets.DOCKER_USERNAME }}/mi-app-react:latest"
